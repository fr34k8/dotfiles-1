" Don't bother supporting vi, update window title, no ~file
set nocompatible title nobackup noswapfile
" Show line number, current line and current command
set number cursorline showcmd
" Search incrementally with smart case sensitivity, highlight all matches
set incsearch ignorecase smartcase hlsearch
" Automatic indentation and adjust with tab and backspace
set autoindent smartindent smarttab
" Shorten messages, disable intro screen and disable audible bell
set shortmess=atI visualbell t_vb=
" Allow backspace in insert mode, show hard tabs and trailing whitespace
set backspace=2 list listchars=tab:>\ ,trail:·,nbsp:_
" Show hard tabs as 4 wide, use 2 space indentation rounded to multiples
set tabstop=4 expandtab shiftwidth=2 shiftround
" Show tab-complete suggestions and complete longest substring.
set wildmenu wildmode=list:longest
" Color line 80
set colorcolumn=80
" Fold on { { {
set foldmethod=marker foldlevelstart=10
" Use space as leader
let mapleader=" "
" Use os's clipboard
if (executable('pbcopy') || executable('xclip') || executable('xsel')) && has('clipboard')
  set clipboard=unnamed
endif
" Use mksh
set shell=mksh

" Packages
call plug#begin()
" Plugins
Plug 'neomake/neomake'
" Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-vinegar'
Plug 'ervandew/supertab'
" Plug 'ctrlpvim/ctrlp.vim'
" Plug 'jlanzarotta/bufexplorer'
Plug 'editorconfig/editorconfig-vim'

" Languages
Plug 'mxw/vim-jsx'
Plug 'fatih/vim-go'
Plug 'pangloss/vim-javascript'
Plug 'reasonml/vim-reason-loader'
call plug#end()

" Syntax highlighting, filetype indentation rules, color scheme
syntax on
filetype plugin indent on
set background=light
colorscheme u

" Status line
set statusline=\ %f\ %m\ %r%=(%c,\ %l)\ 

" Auto commands
autocmd VimResized * :wincmd = " Equalize window sizes on resize
autocmd BufNewFile,BufRead *.md setlocal spell " Help correct my English

" Split movement
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
nnoremap <C-w>n <ESC>:tabnext<CR>
if has("nvim")
  tnoremap <C-h> <C-\><C-n><C-w>h
  tnoremap <C-j> <C-\><C-n><C-w>j
  tnoremap <C-k> <C-\><C-n><C-w>k
  tnoremap <C-l> <C-\><C-n><C-w>l
  nmap <BS> <C-W>h " Hack to get C-h working in neovim
  tnoremap <Esc> <C-\><C-n>
end

" Leader commands
nmap <leader>n :nohlsearch<CR>
noremap <leader>b :BufExplorer<CR>
noremap <leader>f :execute 'edit %:h/'<CR>
noremap <leader>t :CtrlP<CR>

" CtrlP
let g:ctrlp_root_markers = ['node_modules']
let g:ctrlp_match_window = 'bottom,order:ttb'
let g:ctrlp_switch_buffer = 0
let g:ctrlp_user_command = 'ag %s -l --nocolor --hidden -g ""'

" Neomake
autocmd BufWritePost * Neomake
hi NeomakeErrorSign ctermfg=red
hi NeomakeWarningSign ctermfg=yellow
let g:neomake_javascript_enabled_makers = ['eslint']
let g:neomake_python_enabled_makers = ['flake8']
let g:neomake_python_flake8_maker = {
    \ 'exe': 'python3',
    \ 'args': [systemlist('which flake8')[0], '--format=default'],
    \ 'errorformat':
        \ '%E%f:%l: could not compile,%-Z%p^,' .
        \ '%A%f:%l:%c: %t%n %m,' .
        \ '%A%f:%l: %t%n %m,' .
        \ '%-G%.%#',
    \ }

" Vimgrap -> Ag
set grepprg=ag\ --vimgrep\ $*
set grepformat=%f:%l:%c:%m

" Go
let g:go_fmt_command = "goimports"
let g:go_list_type = "quickfix"

" OCaml
"let g:opamshare = substitute(system('opam config var share'),'\n$','','''')
"execute "set rtp+=" . g:opamshare . "/merlin/vim"
